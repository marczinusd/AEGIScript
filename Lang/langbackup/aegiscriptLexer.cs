//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 D:\\Eclipse\\aegiscript_live\\aegiscript.g 2013-03-01 18:14:36

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019





using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace 
    AEGIScript.Lang

{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
//[System.CLSCompliant(false)]
public partial class aegiscriptLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int COMMENT=4;
	public const int DIGIT=5;
	public const int ESC_SEQ=6;
	public const int EXPONENT=7;
	public const int FLOAT=8;
	public const int HEX_DIGIT=9;
	public const int IDENT=10;
	public const int INTEGER=11;
	public const int LETTER=12;
	public const int MULTILINE_COMMENT=13;
	public const int OCTAL_ESC=14;
	public const int STRING=15;
	public const int UNICODE_ESC=16;
	public const int WS=17;
	int HIDDEN = Hidden;

    // delegates
    // delegators

	public aegiscriptLexer()
	{
		OnCreated();
	}

	public aegiscriptLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public aegiscriptLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\Eclipse\\aegiscript_live\\aegiscript.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__18();
	partial void LeaveRule_T__18();

	// $ANTLR start "T__18"
	[GrammarRule("T__18")]
	private void mT__18()
	{
		EnterRule_T__18();
		EnterRule("T__18", 1);
		TraceIn("T__18", 1);
		try
		{
			int _type = T__18;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:15:7: ( '(' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:15:9: '('
			{
			DebugLocation(15, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__18", 1);
			LeaveRule("T__18", 1);
			LeaveRule_T__18();
		}
	}
	// $ANTLR end "T__18"

	partial void EnterRule_T__19();
	partial void LeaveRule_T__19();

	// $ANTLR start "T__19"
	[GrammarRule("T__19")]
	private void mT__19()
	{
		EnterRule_T__19();
		EnterRule("T__19", 2);
		TraceIn("T__19", 2);
		try
		{
			int _type = T__19;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:16:7: ( ')' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:16:9: ')'
			{
			DebugLocation(16, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__19", 2);
			LeaveRule("T__19", 2);
			LeaveRule_T__19();
		}
	}
	// $ANTLR end "T__19"

	partial void EnterRule_T__20();
	partial void LeaveRule_T__20();

	// $ANTLR start "T__20"
	[GrammarRule("T__20")]
	private void mT__20()
	{
		EnterRule_T__20();
		EnterRule("T__20", 3);
		TraceIn("T__20", 3);
		try
		{
			int _type = T__20;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:17:7: ( '*' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:17:9: '*'
			{
			DebugLocation(17, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__20", 3);
			LeaveRule("T__20", 3);
			LeaveRule_T__20();
		}
	}
	// $ANTLR end "T__20"

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 4);
		TraceIn("T__21", 4);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:18:7: ( '+' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:18:9: '+'
			{
			DebugLocation(18, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 4);
			LeaveRule("T__21", 4);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 5);
		TraceIn("T__22", 5);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:19:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:19:9: ','
			{
			DebugLocation(19, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 5);
			LeaveRule("T__22", 5);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 6);
		TraceIn("T__23", 6);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:20:7: ( '-' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:20:9: '-'
			{
			DebugLocation(20, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 6);
			LeaveRule("T__23", 6);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 7);
		TraceIn("T__24", 7);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:21:7: ( '/' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:21:9: '/'
			{
			DebugLocation(21, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 7);
			LeaveRule("T__24", 7);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 8);
		TraceIn("T__25", 8);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:22:7: ( '/=' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:22:9: '/='
			{
			DebugLocation(22, 9);
			Match("/="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 8);
			LeaveRule("T__25", 8);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 9);
		TraceIn("T__26", 9);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:23:7: ( ':' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:23:9: ':'
			{
			DebugLocation(23, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 9);
			LeaveRule("T__26", 9);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 10);
		TraceIn("T__27", 10);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:24:7: ( ';' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:24:9: ';'
			{
			DebugLocation(24, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 10);
			LeaveRule("T__27", 10);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 11);
		TraceIn("T__28", 11);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:25:7: ( '<' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:25:9: '<'
			{
			DebugLocation(25, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 11);
			LeaveRule("T__28", 11);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 12);
		TraceIn("T__29", 12);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:26:7: ( '<=' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:26:9: '<='
			{
			DebugLocation(26, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 12);
			LeaveRule("T__29", 12);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 13);
		TraceIn("T__30", 13);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:27:7: ( '=' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:27:9: '='
			{
			DebugLocation(27, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 13);
			LeaveRule("T__30", 13);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 14);
		TraceIn("T__31", 14);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:28:7: ( '>' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:28:9: '>'
			{
			DebugLocation(28, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 14);
			LeaveRule("T__31", 14);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 15);
		TraceIn("T__32", 15);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:29:7: ( '>=' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:29:9: '>='
			{
			DebugLocation(29, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 15);
			LeaveRule("T__32", 15);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 16);
		TraceIn("T__33", 16);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:30:7: ( 'Integer' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:30:9: 'Integer'
			{
			DebugLocation(30, 9);
			Match("Integer"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 16);
			LeaveRule("T__33", 16);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 17);
		TraceIn("T__34", 17);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:31:7: ( 'and' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:31:9: 'and'
			{
			DebugLocation(31, 9);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 17);
			LeaveRule("T__34", 17);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 18);
		TraceIn("T__35", 18);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:32:7: ( 'begin' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:32:9: 'begin'
			{
			DebugLocation(32, 9);
			Match("begin"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 18);
			LeaveRule("T__35", 18);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 19);
		TraceIn("T__36", 19);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:33:7: ( 'constant' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:33:9: 'constant'
			{
			DebugLocation(33, 9);
			Match("constant"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 19);
			LeaveRule("T__36", 19);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 20);
		TraceIn("T__37", 20);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:34:7: ( 'else' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:34:9: 'else'
			{
			DebugLocation(34, 9);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 20);
			LeaveRule("T__37", 20);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 21);
		TraceIn("T__38", 21);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:35:7: ( 'elsif' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:35:9: 'elsif'
			{
			DebugLocation(35, 9);
			Match("elsif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 21);
			LeaveRule("T__38", 21);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 22);
		TraceIn("T__39", 22);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:36:7: ( 'end' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:36:9: 'end'
			{
			DebugLocation(36, 9);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 22);
			LeaveRule("T__39", 22);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 23);
		TraceIn("T__40", 23);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:37:7: ( 'if' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:37:9: 'if'
			{
			DebugLocation(37, 9);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 23);
			LeaveRule("T__40", 23);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 24);
		TraceIn("T__41", 24);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:38:7: ( 'mod' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:38:9: 'mod'
			{
			DebugLocation(38, 9);
			Match("mod"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 24);
			LeaveRule("T__41", 24);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 25);
		TraceIn("T__42", 25);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:39:7: ( 'not' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:39:9: 'not'
			{
			DebugLocation(39, 9);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 25);
			LeaveRule("T__42", 25);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 26);
		TraceIn("T__43", 26);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:40:7: ( 'or' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:40:9: 'or'
			{
			DebugLocation(40, 9);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 26);
			LeaveRule("T__43", 26);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 27);
		TraceIn("T__44", 27);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:41:7: ( 'var' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:41:9: 'var'
			{
			DebugLocation(41, 9);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 27);
			LeaveRule("T__44", 27);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 28);
		TraceIn("T__45", 28);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:42:7: ( 'while' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:42:9: 'while'
			{
			DebugLocation(42, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 28);
			LeaveRule("T__45", 28);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 29);
		TraceIn("FLOAT", 29);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:120:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt7=3;
			try { DebugEnterDecision(7, false);
			try
			{
				alt7 = dfa7.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:120:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(120, 9);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:120:9: ( '0' .. '9' )+
				int cnt1=0;
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_1 = input.LA(1);

					if (((LA1_1>='0' && LA1_1<='9')))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch (alt1)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
						{
						DebugLocation(120, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt1 >= 1)
							goto loop1;

						EarlyExitException eee1 = new EarlyExitException( 1, input );
						DebugRecognitionException(eee1);
						throw eee1;
					}
					cnt1++;
				}
				loop1:
					;

				} finally { DebugExitSubRule(1); }

				DebugLocation(120, 21);
				Match('.'); 
				DebugLocation(120, 25);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:120:25: ( '0' .. '9' )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if (((LA2_1>='0' && LA2_1<='9')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
						{
						DebugLocation(120, 25);
						input.Consume();


						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(120, 37);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:120:37: ( EXPONENT )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='E'||LA3_1=='e'))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:120:37: EXPONENT
					{
					DebugLocation(120, 37);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(3); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:121:9: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(121, 9);
				Match('.'); 
				DebugLocation(121, 13);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:121:13: ( '0' .. '9' )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_1 = input.LA(1);

					if (((LA4_1>='0' && LA4_1<='9')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
						{
						DebugLocation(121, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(121, 25);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:121:25: ( EXPONENT )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='E'||LA5_1=='e'))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:121:25: EXPONENT
					{
					DebugLocation(121, 25);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(5); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:122:9: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(122, 9);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:122:9: ( '0' .. '9' )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if (((LA6_1>='0' && LA6_1<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
						{
						DebugLocation(122, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(122, 21);
				mEXPONENT(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 29);
			LeaveRule("FLOAT", 29);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_MULTILINE_COMMENT();
	partial void LeaveRule_MULTILINE_COMMENT();

	// $ANTLR start "MULTILINE_COMMENT"
	[GrammarRule("MULTILINE_COMMENT")]
	private void mMULTILINE_COMMENT()
	{
		EnterRule_MULTILINE_COMMENT();
		EnterRule("MULTILINE_COMMENT", 30);
		TraceIn("MULTILINE_COMMENT", 30);
		try
		{
			int _type = MULTILINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:125:19: ( '/*' ( . )* '*/' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:125:21: '/*' ( . )* '*/'
			{
			DebugLocation(125, 21);
			Match("/*"); 

			DebugLocation(125, 26);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:125:26: ( . )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1=='*'))
				{
					int LA8_2 = input.LA(2);

					if ((LA8_2=='/'))
					{
						alt8 = 2;
					}
					else if (((LA8_2>='\u0000' && LA8_2<='.')||(LA8_2>='0' && LA8_2<='\uFFFF')))
					{
						alt8 = 1;
					}


				}
				else if (((LA8_1>='\u0000' && LA8_1<=')')||(LA8_1>='+' && LA8_1<='\uFFFF')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:125:26: .
					{
					DebugLocation(125, 26);
					MatchAny(); 

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(125, 29);
			Match("*/"); 

			DebugLocation(125, 34);
			_channel = HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULTILINE_COMMENT", 30);
			LeaveRule("MULTILINE_COMMENT", 30);
			LeaveRule_MULTILINE_COMMENT();
		}
	}
	// $ANTLR end "MULTILINE_COMMENT"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 31);
		TraceIn("EXPONENT", 31);
		try
		{
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:129:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:129:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(129, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(129, 22);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:129:22: ( '+' | '-' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1=='+'||LA9_1=='-'))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
				{
				DebugLocation(129, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(129, 33);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:129:33: ( '0' .. '9' )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if (((LA10_1>='0' && LA10_1<='9')))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
					{
					DebugLocation(129, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 31);
			LeaveRule("EXPONENT", 31);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 32);
		TraceIn("HEX_DIGIT", 32);
		try
		{
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:132:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
			{
			DebugLocation(132, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 32);
			LeaveRule("HEX_DIGIT", 32);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 33);
		TraceIn("ESC_SEQ", 33);
		try
		{
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:136:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt11=3;
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt11 = 1;
					}
					break;
				case 'u':
					{
					alt11 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt11 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 11, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:136:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(136, 9);
				Match('\\'); 
				DebugLocation(136, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:137:9: UNICODE_ESC
				{
				DebugLocation(137, 9);
				mUNICODE_ESC(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:138:9: OCTAL_ESC
				{
				DebugLocation(138, 9);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 33);
			LeaveRule("ESC_SEQ", 33);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 34);
		TraceIn("OCTAL_ESC", 34);
		try
		{
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:143:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1=='\\'))
			{
				int LA12_2 = input.LA(2);

				if (((LA12_2>='0' && LA12_2<='3')))
				{
					int LA12_3 = input.LA(3);

					if (((LA12_3>='0' && LA12_3<='7')))
					{
						int LA12_4 = input.LA(4);

						if (((LA12_4>='0' && LA12_4<='7')))
						{
							alt12 = 1;
						}
						else
						{
							alt12 = 2;
						}
					}
					else
					{
						alt12 = 3;
					}
				}
				else if (((LA12_2>='4' && LA12_2<='7')))
				{
					int LA12_3 = input.LA(3);

					if (((LA12_3>='0' && LA12_3<='7')))
					{
						alt12 = 2;
					}
					else
					{
						alt12 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:143:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(143, 9);
				Match('\\'); 
				DebugLocation(143, 14);
				input.Consume();

				DebugLocation(143, 25);
				input.Consume();

				DebugLocation(143, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:144:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(144, 9);
				Match('\\'); 
				DebugLocation(144, 14);
				input.Consume();

				DebugLocation(144, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Eclipse\\aegiscript_live\\aegiscript.g:145:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(145, 9);
				Match('\\'); 
				DebugLocation(145, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 34);
			LeaveRule("OCTAL_ESC", 34);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 35);
		TraceIn("UNICODE_ESC", 35);
		try
		{
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:150:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:150:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(150, 9);
			Match('\\'); 
			DebugLocation(150, 14);
			Match('u'); 
			DebugLocation(150, 18);
			mHEX_DIGIT(); 
			DebugLocation(150, 28);
			mHEX_DIGIT(); 
			DebugLocation(150, 38);
			mHEX_DIGIT(); 
			DebugLocation(150, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 35);
			LeaveRule("UNICODE_ESC", 35);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 36);
		TraceIn("LETTER", 36);
		try
		{
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:151:17: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
			{
			DebugLocation(151, 17);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 36);
			LeaveRule("LETTER", 36);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 37);
		TraceIn("DIGIT", 37);
		try
		{
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:152:16: ( '0' .. '9' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
			{
			DebugLocation(152, 16);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 37);
			LeaveRule("DIGIT", 37);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 38);
		TraceIn("INTEGER", 38);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:153:9: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:153:11: ( DIGIT )+
			{
			DebugLocation(153, 11);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:153:11: ( DIGIT )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if (((LA13_1>='0' && LA13_1<='9')))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
					{
					DebugLocation(153, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 38);
			LeaveRule("INTEGER", 38);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 39);
		TraceIn("STRING", 39);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:155:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:155:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(155, 8);
			Match('\"'); 
			DebugLocation(155, 12);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:155:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=3;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1=='\\'))
				{
					alt14 = 1;
				}
				else if (((LA14_1>='\u0000' && LA14_1<='!')||(LA14_1>='#' && LA14_1<='[')||(LA14_1>=']' && LA14_1<='\uFFFF')))
				{
					alt14 = 2;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:155:14: ESC_SEQ
					{
					DebugLocation(155, 14);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:155:24: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(155, 24);
					input.Consume();


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(155, 39);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 39);
			LeaveRule("STRING", 39);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 40);
		TraceIn("IDENT", 40);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:157:7: ( LETTER ( LETTER | DIGIT )* )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:157:9: LETTER ( LETTER | DIGIT )*
			{
			DebugLocation(157, 9);
			mLETTER(); 
			DebugLocation(157, 16);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:157:16: ( LETTER | DIGIT )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if (((LA15_1>='0' && LA15_1<='9')||(LA15_1>='A' && LA15_1<='Z')||(LA15_1>='a' && LA15_1<='z')))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
					{
					DebugLocation(157, 16);
					input.Consume();


					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 40);
			LeaveRule("IDENT", 40);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 41);
		TraceIn("WS", 41);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:158:4: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+ )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:158:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			{
			DebugLocation(158, 6);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:158:6: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>='\t' && LA16_1<='\n')||(LA16_1>='\f' && LA16_1<='\r')||LA16_1==' '))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:
					{
					DebugLocation(158, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(158, 41);
			_channel = HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 41);
			LeaveRule("WS", 41);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 42);
		TraceIn("COMMENT", 42);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:159:9: ( '//' ( . )* ( '\\n' | '\\r' ) )
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:159:11: '//' ( . )* ( '\\n' | '\\r' )
			{
			DebugLocation(159, 11);
			Match("//"); 

			DebugLocation(159, 16);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:159:16: ( . )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1=='\n'||LA17_1=='\r'))
				{
					alt17 = 2;
				}
				else if (((LA17_1>='\u0000' && LA17_1<='\t')||(LA17_1>='\u000B' && LA17_1<='\f')||(LA17_1>='\u000E' && LA17_1<='\uFFFF')))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Eclipse\\aegiscript_live\\aegiscript.g:159:16: .
					{
					DebugLocation(159, 16);
					MatchAny(); 

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }

			DebugLocation(159, 19);
			if (input.LA(1)=='\n'||input.LA(1)=='\r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(159, 31);
			_channel = HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 42);
			LeaveRule("COMMENT", 42);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	public override void mTokens()
	{
		// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:8: ( T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | FLOAT | MULTILINE_COMMENT | INTEGER | STRING | IDENT | WS | COMMENT )
		int alt18=35;
		try { DebugEnterDecision(18, false);
		try
		{
			alt18 = dfa18.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(18); }
		switch (alt18)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:10: T__18
			{
			DebugLocation(1, 10);
			mT__18(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:16: T__19
			{
			DebugLocation(1, 16);
			mT__19(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:22: T__20
			{
			DebugLocation(1, 22);
			mT__20(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:28: T__21
			{
			DebugLocation(1, 28);
			mT__21(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:34: T__22
			{
			DebugLocation(1, 34);
			mT__22(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:40: T__23
			{
			DebugLocation(1, 40);
			mT__23(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:46: T__24
			{
			DebugLocation(1, 46);
			mT__24(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:52: T__25
			{
			DebugLocation(1, 52);
			mT__25(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:58: T__26
			{
			DebugLocation(1, 58);
			mT__26(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:64: T__27
			{
			DebugLocation(1, 64);
			mT__27(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:70: T__28
			{
			DebugLocation(1, 70);
			mT__28(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:76: T__29
			{
			DebugLocation(1, 76);
			mT__29(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:82: T__30
			{
			DebugLocation(1, 82);
			mT__30(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:88: T__31
			{
			DebugLocation(1, 88);
			mT__31(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:94: T__32
			{
			DebugLocation(1, 94);
			mT__32(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:100: T__33
			{
			DebugLocation(1, 100);
			mT__33(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:106: T__34
			{
			DebugLocation(1, 106);
			mT__34(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:112: T__35
			{
			DebugLocation(1, 112);
			mT__35(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:118: T__36
			{
			DebugLocation(1, 118);
			mT__36(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:124: T__37
			{
			DebugLocation(1, 124);
			mT__37(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:130: T__38
			{
			DebugLocation(1, 130);
			mT__38(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:136: T__39
			{
			DebugLocation(1, 136);
			mT__39(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:142: T__40
			{
			DebugLocation(1, 142);
			mT__40(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:148: T__41
			{
			DebugLocation(1, 148);
			mT__41(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:154: T__42
			{
			DebugLocation(1, 154);
			mT__42(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:160: T__43
			{
			DebugLocation(1, 160);
			mT__43(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:166: T__44
			{
			DebugLocation(1, 166);
			mT__44(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:172: T__45
			{
			DebugLocation(1, 172);
			mT__45(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:178: FLOAT
			{
			DebugLocation(1, 178);
			mFLOAT(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:184: MULTILINE_COMMENT
			{
			DebugLocation(1, 184);
			mMULTILINE_COMMENT(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:202: INTEGER
			{
			DebugLocation(1, 202);
			mINTEGER(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:210: STRING
			{
			DebugLocation(1, 210);
			mSTRING(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:217: IDENT
			{
			DebugLocation(1, 217);
			mIDENT(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:223: WS
			{
			DebugLocation(1, 223);
			mWS(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// D:\\Eclipse\\aegiscript_live\\aegiscript.g:1:226: COMMENT
			{
			DebugLocation(1, 226);
			mCOMMENT(); 

			}
			break;

		}

	}


	#region DFA
	DFA7 dfa7;
	DFA18 dfa18;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa7 = new DFA7(this);
		dfa18 = new DFA18(this);
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x5\xFFFF";
		private const string DFA7_eofS =
			"\x5\xFFFF";
		private const string DFA7_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA7_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA7_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA7_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "119:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA18 : DFA
	{
		private const string DFA18_eotS =
			"\x7\xFFFF\x1\x20\x2\xFFFF\x1\x22\x1\xFFFF\x1\x24\xB\x1B\x1\x31\xC\xFFFF"+
			"\x6\x1B\x1\x38\x2\x1B\x1\x3B\x2\x1B\x1\xFFFF\x1\x1B\x1\x3F\x3\x1B\x1"+
			"\x44\x1\xFFFF\x1\x45\x1\x46\x1\xFFFF\x1\x47\x2\x1B\x1\xFFFF\x2\x1B\x1"+
			"\x4C\x1\x1B\x4\xFFFF\x2\x1B\x1\x50\x1\x1B\x1\xFFFF\x1\x52\x1\x53\x1\x1B"+
			"\x1\xFFFF\x1\x1B\x2\xFFFF\x1\x56\x1\x1B\x1\xFFFF\x1\x58\x1\xFFFF";
		private const string DFA18_eofS =
			"\x59\xFFFF";
		private const string DFA18_minS =
			"\x1\x9\x6\xFFFF\x1\x2A\x2\xFFFF\x1\x3D\x1\xFFFF\x1\x3D\x2\x6E\x1\x65"+
			"\x1\x6F\x1\x6C\x1\x66\x2\x6F\x1\x72\x1\x61\x1\x68\x1\x2E\xC\xFFFF\x1"+
			"\x74\x1\x64\x1\x67\x1\x6E\x1\x73\x1\x64\x1\x30\x1\x64\x1\x74\x1\x30\x1"+
			"\x72\x1\x69\x1\xFFFF\x1\x65\x1\x30\x1\x69\x1\x73\x1\x65\x1\x30\x1\xFFFF"+
			"\x2\x30\x1\xFFFF\x1\x30\x1\x6C\x1\x67\x1\xFFFF\x1\x6E\x1\x74\x1\x30\x1"+
			"\x66\x4\xFFFF\x2\x65\x1\x30\x1\x61\x1\xFFFF\x2\x30\x1\x72\x1\xFFFF\x1"+
			"\x6E\x2\xFFFF\x1\x30\x1\x74\x1\xFFFF\x1\x30\x1\xFFFF";
		private const string DFA18_maxS =
			"\x1\x7A\x6\xFFFF\x1\x3D\x2\xFFFF\x1\x3D\x1\xFFFF\x1\x3D\x2\x6E\x1\x65"+
			"\x1\x6F\x1\x6E\x1\x66\x2\x6F\x1\x72\x1\x61\x1\x68\x1\x65\xC\xFFFF\x1"+
			"\x74\x1\x64\x1\x67\x1\x6E\x1\x73\x1\x64\x1\x7A\x1\x64\x1\x74\x1\x7A\x1"+
			"\x72\x1\x69\x1\xFFFF\x1\x65\x1\x7A\x1\x69\x1\x73\x1\x69\x1\x7A\x1\xFFFF"+
			"\x2\x7A\x1\xFFFF\x1\x7A\x1\x6C\x1\x67\x1\xFFFF\x1\x6E\x1\x74\x1\x7A\x1"+
			"\x66\x4\xFFFF\x2\x65\x1\x7A\x1\x61\x1\xFFFF\x2\x7A\x1\x72\x1\xFFFF\x1"+
			"\x6E\x2\xFFFF\x1\x7A\x1\x74\x1\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA18_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\xFFFF\x1\x9\x1\xA\x1"+
			"\xFFFF\x1\xD\xD\xFFFF\x1\x1D\x1\x20\x1\x21\x1\x22\x1\x8\x1\x1E\x1\x23"+
			"\x1\x7\x1\xC\x1\xB\x1\xF\x1\xE\xC\xFFFF\x1\x1F\x6\xFFFF\x1\x17\x2\xFFFF"+
			"\x1\x1A\x3\xFFFF\x1\x11\x4\xFFFF\x1\x16\x1\x18\x1\x19\x1\x1B\x4\xFFFF"+
			"\x1\x14\x3\xFFFF\x1\x12\x1\xFFFF\x1\x15\x1\x1C\x2\xFFFF\x1\x10\x1\xFFFF"+
			"\x1\x13";
		private const string DFA18_specialS =
			"\x59\xFFFF}>";
		private static readonly string[] DFA18_transitionS =
			{
				"\x2\x1C\x1\xFFFF\x2\x1C\x12\xFFFF\x1\x1C\x1\xFFFF\x1\x1A\x5\xFFFF\x1"+
				"\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x19\x1\x7\xA\x18\x1\x8\x1\x9\x1"+
				"\xA\x1\xB\x1\xC\x2\xFFFF\x8\x1B\x1\xD\x11\x1B\x6\xFFFF\x1\xE\x1\xF\x1"+
				"\x10\x1\x1B\x1\x11\x3\x1B\x1\x12\x3\x1B\x1\x13\x1\x14\x1\x15\x6\x1B"+
				"\x1\x16\x1\x17\x3\x1B",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1E\x4\xFFFF\x1\x1F\xD\xFFFF\x1\x1D",
				"",
				"",
				"\x1\x21",
				"",
				"\x1\x23",
				"\x1\x25",
				"\x1\x26",
				"\x1\x27",
				"\x1\x28",
				"\x1\x29\x1\xFFFF\x1\x2A",
				"\x1\x2B",
				"\x1\x2C",
				"\x1\x2D",
				"\x1\x2E",
				"\x1\x2F",
				"\x1\x30",
				"\x1\x19\x1\xFFFF\xA\x18\xB\xFFFF\x1\x19\x1F\xFFFF\x1\x19",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x32",
				"\x1\x33",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\x1\x39",
				"\x1\x3A",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\x1\x3C",
				"\x1\x3D",
				"",
				"\x1\x3E",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42\x3\xFFFF\x1\x43",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\x1\x48",
				"\x1\x49",
				"",
				"\x1\x4A",
				"\x1\x4B",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\x1\x4D",
				"",
				"",
				"",
				"",
				"\x1\x4E",
				"\x1\x4F",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\x1\x51",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\x1\x54",
				"",
				"\x1\x55",
				"",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				"\x1\x57",
				"",
				"\xA\x1B\x7\xFFFF\x1A\x1B\x6\xFFFF\x1A\x1B",
				""
			};

		private static readonly short[] DFA18_eot = DFA.UnpackEncodedString(DFA18_eotS);
		private static readonly short[] DFA18_eof = DFA.UnpackEncodedString(DFA18_eofS);
		private static readonly char[] DFA18_min = DFA.UnpackEncodedStringToUnsignedChars(DFA18_minS);
		private static readonly char[] DFA18_max = DFA.UnpackEncodedStringToUnsignedChars(DFA18_maxS);
		private static readonly short[] DFA18_accept = DFA.UnpackEncodedString(DFA18_acceptS);
		private static readonly short[] DFA18_special = DFA.UnpackEncodedString(DFA18_specialS);
		private static readonly short[][] DFA18_transition;

		static DFA18()
		{
			int numStates = DFA18_transitionS.Length;
			DFA18_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA18_transition[i] = DFA.UnpackEncodedString(DFA18_transitionS[i]);
			}
		}

		public DFA18( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 18;
			this.eot = DFA18_eot;
			this.eof = DFA18_eof;
			this.min = DFA18_min;
			this.max = DFA18_max;
			this.accept = DFA18_accept;
			this.special = DFA18_special;
			this.transition = DFA18_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | FLOAT | MULTILINE_COMMENT | INTEGER | STRING | IDENT | WS | COMMENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace 


grammar aegiscript;

options {
  language = CSharp3;
  output = AST;
  ASTLabelType=CommonTree;
}



/*
 * Parser Rules
 */


public
program
	:
		'begin'
		statement*
		'end' ';'
	;

constant
	:	'constant' type IDENT '=' expression ';'
	;

variable
	:	'var' IDENT (',' IDENT)* ':' type ('=' expression)? ';'
	;
	
type
	:	'Integer'
	;
	
ifStatement
	: 'if' expression ':'
		statement*
	   ('elsif' expression ':'
	     statement* )*
	   ('else' ':'
	     statement* )?
	     'end' 'if' ';'
	;

whileStatement
	:	'while' expression ':'
		statement*
		'end' 'while' ';'
	;

statement
	:	assignmentStatement
	|	whileStatement
	|	ifStatement
	;

assignmentStatement
	:	IDENT '=' expression ';'
	;
	
term 
	:	IDENT
	|	'(' expression ')'
	|	INTEGER
	;
	
negation
	:	'not'* term
	;
	
unary
	:	('+' | '-')* negation
	;

mult
	:	unary (('*' | '/' | 'mod') unary)*
	;
	
add
	:	mult (('+' | '-') mult)*
	;

relation
	:	add (('=' | '/=' | '<' | '<=' | '>=' | '>') add)*
	;
	
expression
	:	relation (('and' | 'or') relation)*
	;
	
FLOAT
    :   ('0'..'9')+ '.' ('0'..'9')* EXPONENT?
    |   '.' ('0'..'9')+ EXPONENT?
    |   ('0'..'9')+ EXPONENT
    ;

MULTILINE_COMMENT : '/*' .* '*/'; //{$channel = HIDDEN;} ;

fragment
EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;

fragment
HEX_DIGIT : ('0'..'9'|'a'..'f'|'A'..'F') ;

fragment
ESC_SEQ
    :   '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
    |   UNICODE_ESC
    |   OCTAL_ESC
    ;

fragment
OCTAL_ESC
    :   '\\' ('0'..'3') ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7') ('0'..'7')
    |   '\\' ('0'..'7')
    ;

fragment
UNICODE_ESC
    :   '\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    ;
fragment LETTER : ('a'..'z' | 'A'..'Z') ;
fragment DIGIT : '0'..'9';
INTEGER : DIGIT+ ;
IDENT : LETTER (LETTER | DIGIT)*;
WS : (' ' | '\t' | '\n' | '\r' | '\f')+; //{$channel = HIDDEN;};
COMMENT : '//' .* ('\n'|'\r'); //{$channel = HIDDEN;};